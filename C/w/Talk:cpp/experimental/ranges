<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Talk:cpp/experimental/ranges - cppreference.com</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.21.2" />
<link rel="alternate" type="application/x-wiki" title="Edit" href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit" />
<link rel="edit" title="Edit" href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit" />
<link rel="shortcut icon" href="http://en.cppreference.com/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.cppreference.com/mwiki/opensearch_desc.php" title="cppreference.com (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.cppreference.com/mwiki/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="http://en.cppreference.com/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.ColiruCompiler%2CMathJax%7Cext.rtlcite%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.cppreference2&amp;only=styles&amp;skin=cppreference2&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=cppreference2&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>

<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"Talk","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":1,"wgPageName":"Talk:cpp/experimental/ranges","wgTitle":"cpp/experimental/ranges","wgCurRevisionId":89985,"wgArticleId":15757,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Talk:cpp/experimental/ranges","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":0,"showtoolbar":1,"skin":"cppreference2","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"gadget-ColiruCompiler":1,"gadget-MathJax":1});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});;},{},{});
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-js:7:9f05c6caceb9bb1a482b6cebd4c5a330 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000dd;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #909090;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es1 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es2 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es3 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es4 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es5 {color: #008000; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #008000;}
.cpp.source-cpp .nu0 {color: #000080;}
.cpp.source-cpp .nu6 {color: #000080;}
.cpp.source-cpp .nu8 {color: #000080;}
.cpp.source-cpp .nu12 {color: #000080;}
.cpp.source-cpp .nu16 {color:#000080;}
.cpp.source-cpp .nu17 {color:#000080;}
.cpp.source-cpp .nu18 {color:#000080;}
.cpp.source-cpp .nu19 {color:#000080;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-1 ns-talk page-Talk_cpp_experimental_ranges skin-cppreference2 action-view">
        <!-- header -->
        <div id="mw-head" class="noprint">
            <div id="cpp-head-first-base">
                <div id="cpp-head-first">
                    <h5><a href="http://en.cppreference.com/">
                        cppreference.com                        </a></h5>
                    <div id="cpp-head-search">
                        
<!-- 0 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="http://en.cppreference.com/mwiki/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<div id="simpleSearch">
						<input name="search" title="Search cppreference.com [f]" accesskey="f" id="searchInput" />						<button type="submit" name="button" title="Search the pages for this text" id="searchButton"><img src="http://en.cppreference.com/mwiki/skins/cppreference2/images/search-ltr.png?303" alt="Search" /></button>					</div>
			</form>
</div>

<!-- /0 -->
                    </div>
                    <div id="cpp-head-personal">
                        
<!-- 0 -->
<div id="p-personal" class="">
<span id="pt-createaccount"><a href="http://en.cppreference.com/mwiki/index.php?title=Special:UserLogin&amp;returnto=Talk%3Acpp%2Fexperimental%2Franges&amp;type=signup">Create account</a></span>	<div class="menu">
        <ul>
<li id="pt-login"><a href="http://en.cppreference.com/mwiki/index.php?title=Special:UserLogin&amp;returnto=Talk%3Acpp%2Fexperimental%2Franges" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>        </ul>
    </div>
</div>

<!-- /0 -->
                    </div>

                </div>
            </div>
            <div id="cpp-head-second-base">
                <div id="cpp-head-second">
                    <div id="cpp-head-tools-left">
                        
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main"><span><a href="http://en.cppreference.com/w/cpp/experimental/ranges"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="selected"><span><a href="ranges"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="ranges#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                    <div id="cpp-head-tools-right">
                        
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="ranges" >View</a></span></li>
					<li id="ca-edit" class=" istalk"><span><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit"  title="You can edit this page. Please use the preview button before saving [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-addsection" class="collapsible"><span><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit&amp;section=new"  title="Start a new section [+]" accesskey="+">+</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="ranges#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                </div>
            </div>
        </div>
        <!-- /header -->
        <!-- content -->
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->
                <h1 id="firstHeading" class="firstHeading">Talk:cpp/experimental/ranges</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    <div id="siteSub">From cppreference.com</div>
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    <div id="contentSub"><span class="subpages">&lt; <a href="../../Talk:cpp.1" title="Talk:cpp">Talk:cpp</a></span></div>
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>I haven't even added Clause 7 yet and this already feels too long. Separate pages for clauses 4-7, maybe? But then it might feel too short. <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 15:02, 2 December 2016 (PST)
</p>
<h2><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit&amp;section=1" title="Edit section: Qualified names in signatures?">edit</a>]</span> <span class="mw-headline" id="Qualified_names_in_signatures.3F"> Qualified names in signatures? </span></h2>
<p>Our usual style is to use fully qualified names in signatures (it allows automatic links and all that), but this seems...a little too much:
</p>
<table class="t-dcl-begin"><tbody>
<tr class="t-dsc-header">
<td> <div>Defined in header <code><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/header/experimental/ranges/algorithm&amp;action=edit&amp;redlink=1" class="new" title="cpp/header/experimental/ranges/algorithm (page does not exist)">&lt;experimental/ranges/algorithm&gt;</a></code>
 </div></td>
<td></td>
<td></td>
</tr>
<tr class="t-dcl">
<td class="t-dcl-nopad"> <div><span class="mw-geshi cpp source-cpp"><span class="kw1">template</span> <span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/ForwardIterator"><span class="kw2571">ranges::<span class="me2">ForwardIterator</span></span></a> I,<br />
<p>&#160; &#160; &#160; &#160; &#160; std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/Sentinel"><span class="kw2567">ranges::<span class="me2">Sentinel</span></span></a><span class="sy1">&lt;</span>I<span class="sy1">&gt;</span> S,<br />
&#160; &#160; &#160; &#160; &#160; <span class="kw1">class</span> T, <br />
&#160; &#160; &#160; &#160; &#160; <span class="kw1">class</span> Proj <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><span class="me2">ranges</span><span class="sy4">::</span><span class="me2">identity</span>,<br />
&#160; &#160; &#160; &#160; &#160; std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/IndirectStrictWeakOrder"><span class="kw2578">ranges::<span class="me2">IndirectStrictWeakOrder</span></span></a><span class="sy1">&lt;</span><span class="kw4">const</span> T<span class="sy2">*</span>,<br />
&#160; &#160; &#160; &#160; &#160; &#160; &#160; std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/projected"><span class="kw2597">ranges::<span class="me2">projected</span></span></a><span class="sy1">&lt;</span>I, Proj<span class="sy1">&gt;&gt;</span><br />
&#160; &#160; &#160; &#160; &#160; &#160; &#160; Comp <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><span class="me2">ranges</span><span class="sy4">::</span><span class="me2">less</span><span class="sy1">&lt;&gt;&gt;</span><br />
</p>
<span class="kw4">bool</span> binary_search<span class="br0">&#40;</span>I first, S last, <span class="kw4">const</span> T<span class="sy3">&amp;</span> value, Comp comp <span class="sy1">=</span> Comp<span class="br0">&#123;</span><span class="br0">&#125;</span>, Proj proj <span class="sy1">=</span> Proj<span class="br0">&#123;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td class="t-dcl-nopad">  </td>
</tr>
<tr class="t-dcl-sep"><td></td><td></td><td></td></tr>
</tbody></table>
<p>Even this seems a bit excessive:
</p>
<table class="t-dcl-begin"><tbody>
<tr class="t-dsc-header">
<td> <div>Defined in header <code><a href="http://en.cppreference.com/mwiki/index.php?title=cpp/header/experimental/ranges/algorithm&amp;action=edit&amp;redlink=1" class="new" title="cpp/header/experimental/ranges/algorithm (page does not exist)">&lt;experimental/ranges/algorithm&gt;</a></code>
 </div></td>
<td></td>
<td></td>
</tr>
<tr class="t-dcl">
<td class="t-dcl-nopad"> <div><span class="mw-geshi cpp source-cpp"><span class="kw1">template</span> <span class="sy1">&lt;</span><a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/ForwardIterator"><span class="kw2571">ranges::<span class="me2">ForwardIterator</span></span></a> I, <a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/Sentinel"><span class="kw2567">ranges::<span class="me2">Sentinel</span></span></a><span class="sy1">&lt;</span>I<span class="sy1">&gt;</span> S,<br />
<p>&#160; &#160; &#160; &#160; &#160; <span class="kw1">class</span> T, <span class="kw1">class</span> Proj <span class="sy1">=</span> ranges<span class="sy4">::</span><span class="me2">identity</span>,<br />
&#160; &#160; &#160; &#160; &#160; <a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/IndirectStrictWeakOrder"><span class="kw2578">ranges::<span class="me2">IndirectStrictWeakOrder</span></span></a><span class="sy1">&lt;</span><span class="kw4">const</span> T<span class="sy2">*</span>, <a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/projected"><span class="kw2597">ranges::<span class="me2">projected</span></span></a><span class="sy1">&lt;</span>I, Proj<span class="sy1">&gt;&gt;</span> Comp <span class="sy1">=</span> ranges<span class="sy4">::</span><span class="me2">less</span><span class="sy1">&lt;&gt;&gt;</span><br />
</p>
<span class="kw4">bool</span> binary_search<span class="br0">&#40;</span>I first, S last, <span class="kw4">const</span> T<span class="sy3">&amp;</span> value, Comp comp <span class="sy1">=</span> Comp<span class="br0">&#123;</span><span class="br0">&#125;</span>, Proj proj <span class="sy1">=</span> Proj<span class="br0">&#123;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span></span></div></td>
<td class="t-dcl-nopad">  </td>
<td class="t-dcl-nopad">  </td>
</tr>
<tr class="t-dcl-sep"><td></td><td></td><td></td></tr>
</tbody></table>
<p>And <code>binary_search</code> isn't even close to the worst. Any ideas? <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 20:54, 5 January 2017 (PST)
</p>
<dl><dd> I think it would work if autolinker could pick up from just the most-nested namespace. <code>filesystem::path</code>, <code>ranges::less</code>, etc. I am looking at Networking TS right now (NB comments round) and that is going to be another handful of <code>std::experimental::net::whatever</code>s. To drop full qualifications completely, autolinker would have to be come really smart.. or the dcl templates would have to allow manual linking and lots of tedious editing. We'll need <a href="../../User:P12" title="User:P12">User:P12</a> to weigh in on that. --<a href="../../User:Cubbi.2" title="User:Cubbi">Cubbi</a> (<a href="../../User_talk:Cubbi" title="User talk:Cubbi">talk</a>) 06:11, 6 January 2017 (PST)
</dd></dl>
<dl><dd> Another option could be to start wrapping dcls in namespaces, as in
</dd></dl>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw1">namespace</span> std<span class="sy4">::</span><span class="me2">experimental</span><span class="sy4">::</span><span class="me2">ranges</span> <span class="br0">&#123;</span>
  <span class="kw1">template</span> <span class="sy1">&lt;</span>ForwardIterator I, Sentinel<span class="sy1">&lt;</span>I<span class="sy1">&gt;</span> S...
<span class="br0">&#125;</span></pre></div></div>
<dl><dd> but again not clear if autolinker can be smart enough to link ForwardIterator here. --<a href="../../User:Cubbi.2" title="User:Cubbi">Cubbi</a> (<a href="../../User_talk:Cubbi" title="User talk:Cubbi">talk</a>) 11:39, 6 January 2017 (PST)
<dl><dd> If I understand correctly, linking in &#123;&#123;<a href="../../Template:dcl" title="Template:dcl">dcl</a>&#125;&#125; (via &#123;&#123;<a href="../../Template:c/core" title="Template:c/core">c/core</a>&#125;&#125;) is powered by GeSHi's keyword links feature and controlled by <a href="../../MediaWiki:Geshi-keyword-list-cpp" title="MediaWiki:Geshi-keyword-list-cpp">MediaWiki:Geshi-keyword-list-cpp</a> rather than by <a href="http://en.cppreference.com/w/MediaWiki:Autolinker-definition-cpp" title="MediaWiki:Autolinker-definition-cpp">MediaWiki:Autolinker-definition-cpp</a> (which powers &#123;&#123;<a href="http://en.cppreference.com/w/Template:lc" title="Template:lc">lc</a>&#125;&#125;). So unless we want to hack GeSHi, we can try altering the list to make it treat, e.g., <code>filesystem::path</code> as the keyword rather than <code>std::experimental::filesystem::path</code>. The drawbacks are 1) the <code>std::experimental::</code> part presumably won't be linkified, and 2) potential conflicts when something gets merged into the standard (e.g., if this had been done for the filesystem TS,  <code>filesystem::path</code> would have been pointing to the TS version, and then we can't make it point to the IS version). One way to solve it might be to invent a "new language" for subpages of <a href="http://en.cppreference.com/w/cpp/experimental" title="cpp/experimental">cpp/experimental</a> so that they get a different keyword list, and then we can make <code>filesystem::path</code> go to <span class="t-lc"><a href="http://en.cppreference.com/w/cpp/experimental/fs/path" title="cpp/experimental/fs/path">std::experimental::filesystem::path</a></span> on <a href="http://en.cppreference.com/mwiki/index.php?title=cpp/experimental/foo&amp;action=edit&amp;redlink=1" class="new" title="cpp/experimental/foo (page does not exist)">cpp/experimental/foo</a> but <span class="t-lc"><a href="http://en.cppreference.com/w/cpp/filesystem/path" title="cpp/filesystem/path">std::filesystem::path</a></span> on <a href="http://en.cppreference.com/mwiki/index.php?title=cpp/foo&amp;action=edit&amp;redlink=1" class="new" title="cpp/foo (page does not exist)">cpp/foo</a>, but that 1) requires server-side changes and 2) could be hard to maintain since we would be duplicating a lot of stuff. <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 19:50, 10 January 2017 (PST)
<dl><dd>Revisiting this again, I've been using the <span class="t-c"><span class="mw-geshi cpp source-cpp">ranges<span class="sy4">::</span><span class="me2">foo</span></span></span> form since it's about as short as possible, while still permitting automatic linking without server-side changes. The "conflict" part isn't a significant issue for the Ranges TS at least, since the intent is for it to eventually become <span class="t-c"><span class="mw-geshi cpp source-cpp">std\d<span class="sy2">+</span><span class="sy4">::</span><span class="me2">meow</span></span></span> rather than <span class="t-c"><span class="mw-geshi cpp source-cpp">std<span class="sy4">::</span><span class="me2">ranges</span><span class="sy4">::</span><span class="me2">meow</span></span></span>. So we just have to tell GeSHi that the "keyword" is <code>ranges::foo</code> rather than <code>std::experimental::ranges::foo</code>. (Autolinker is trickier, but it's also used in much fewer places. Worst case scenario, we can easily create a wrapper template so that &#123;&#123;<a href="http://en.cppreference.com/mwiki/index.php?title=Template:lc-rng&amp;action=edit&amp;redlink=1" class="new" title="Template:lc-rng (page does not exist)">lc-rng</a>&#124;foo&#125;&#125; does the equivalent of &#123;&#123;<a href="http://en.cppreference.com/w/Template:lc" title="Template:lc">lc</a>&#124;std::experimental::ranges::foo&#124;ranges::foo&#125;&#125;.) <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 12:26, 23 January 2017 (PST)
</dd></dl>
</dd></dl>
</dd></dl>
<dl><dd><dl><dd><dl><dd><dl><dd> I have some plans and even some prototyped code for a new autolinker that would be namespace-aware. That would solve the verbosity issues in the long-term. We could even drop std:: and add something like on-hover tooltips that would show fully-qualified names. I think that hacking the keyword definitions is a good solution short-term. --<a href="../../User:P12" title="User:P12">P12</a> 01:58, 1 February 2017 (PST)
</dd></dl>
</dd></dl>
</dd></dl>
</dd></dl>
<h2><span class="editsection">[<a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=edit&amp;section=2" title="Edit section: Should we keep concept rows in the parameters table?">edit</a>]</span> <span class="mw-headline" id="Should_we_keep_concept_rows_in_the_parameters_table.3F"> Should we keep concept rows in the parameters table? </span></h2>
<p>Take <a href="http://en.cppreference.com/w/cpp/experimental/ranges/algorithm/sort" title="cpp/experimental/ranges/algorithm/sort">cpp/experimental/ranges/algorithm/sort</a> for an example, to what extent should we bother documenting the requirements in the table (with &#123;&#123;<a href="../../Template:par_req_concept" title="Template:par req concept">par req concept</a>&#125;&#125; etc.)? Note that <span class="t-c"><span class="mw-geshi cpp source-cpp">Sortable<span class="sy1">&lt;</span>I, Comp, Proj<span class="sy1">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span></span></span> eventually decomposes into a large number of requirements, not all obvious. (Let's assume that we have all the links and pages in place so with enough clicking and note-taking one can figure it out from the signature and the definition of the various concepts.) <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 15:17, 20 January 2017 (PST)
</p>
<dl><dd> I would think the point of named concepts (as opposed to individual constraints) is that the user doesn't need to decompose them, so <a href="http://en.cppreference.com/mwiki/index.php?title=cpp/concept/Sortable&amp;action=edit&amp;redlink=1" class="new" title="cpp/concept/Sortable (page does not exist)"><code>Sortable</code></a> is the only requirement that should be listed. Even in today's library, if something requires <a href="http://en.cppreference.com/w/cpp/concept/RandomAccessIterator" title="cpp/concept/RandomAccessIterator"><code>RandomAccessIterator</code></a>, we don't also say it is required to be <a href="http://en.cppreference.com/w/cpp/concept/BidirectionalIterator" title="cpp/concept/BidirectionalIterator"><code>BidirectionalIterator</code></a> and everything else down to <a href="http://en.cppreference.com/w/cpp/concept/DefaultConstructible" title="cpp/concept/DefaultConstructible"><code>DefaultConstructible</code></a> --<a href="../../User:Cubbi.2" title="User:Cubbi">Cubbi</a> (<a href="../../User_talk:Cubbi" title="User talk:Cubbi">talk</a>) 18:38, 20 January 2017 (PST)
<dl><dd> If that's the case, then we wouldn't need to bother since it's implied in the signature. The problem is that some of the constraints are not obvious (<span class="t-c"><span class="mw-geshi cpp source-cpp">projected</span></span> being the worst offender, because it is used all over the place and adds a <span class="t-c"><span class="mw-geshi cpp source-cpp">IndirectRegularInvocable<span class="sy1">&lt;</span>P, I<span class="sy1">&gt;</span></span></span> constraint via its template-parameter-list), and it's really hard now to answer a question like "I have a vector of <span class="t-c"><span class="mw-geshi cpp source-cpp">T</span></span>s, what must <span class="t-c"><span class="mw-geshi cpp source-cpp">T</span></span> satisfy in order for <span class="t-c"><span class="mw-geshi cpp source-cpp">sort</span></span> to work?" Previously, the answer is fairly straightforward. Now we have to wade through a large tree of concepts and multiple customization point objects with complex definitions before we can figure out the answer and be certain that we didn't miss anything. <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 19:16, 20 January 2017 (PST)
<dl><dd>After thinking about this some more, perhaps it's better to just use <a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/Sortable" title="cpp/experimental/ranges/iterator/Sortable"><code>Sortable</code></a> on the <a href="http://en.cppreference.com/w/cpp/experimental/ranges/algorithm/sort" title="cpp/experimental/ranges/algorithm/sort"><tt>ranges::sort</tt></a> page, and then decompose as needed on the concept page as part of the notes. I still think we need to decompose sprawling concepts like <a href="http://en.cppreference.com/w/cpp/experimental/ranges/iterator/Sortable" title="cpp/experimental/ranges/iterator/Sortable"><code>Sortable</code></a> somewhere, since they represent a pretty big tree of requirements, and I think we should at least break it down into easier to digest pieces. <p> The iterator concepts are rather different: they have a ~linear hierarchy, so the requirements are easier to pin down, and in any event, those requirements are most interesting to people who <i>write</i> iterators, not people who use them (who can just check the iterator category in the documentation etc. and match it against the algorithm's requirement), whereas here the requirements are of great interest to people who use <span class="t-c"><span class="mw-geshi cpp source-cpp">sort</span></span>. <a href="../../User:T._Canens" title="User:T. Canens">T. Canens</a> (<a href="../../User_talk:T._Canens" title="User talk:T. Canens">talk</a>) 01:33, 23 January 2017 (PST)</p>
</dd></dl>
</dd></dl>
</dd></dl>

<!-- 
NewPP limit report
Preprocessor visited node count: 1084/1000000
Preprocessor generated node count: 3064/1000000
Post‐expand include size: 8816/2097152 bytes
Template argument size: 4871/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:15757-0!*!0!!*!*!* and timestamp 20170720233608 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;oldid=89985">http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;oldid=89985</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id='catlinks' class='catlinks catlinks-allhidden'></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        <div id="cpp-footer-base" class="noprint">
            <div id="footer">
                        <div id="cpp-navigation">
            <h5>Navigation</h5>
            <ul>
<li id="n-Support-us"><a href="http://www.cppreference.com/support" rel="nofollow">Support us</a></li><li id="n-recentchanges"><a href="../../Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-FAQ"><a href="../../Cppreference:FAQ">FAQ</a></li><li id="n-Offline-version"><a href="../../Cppreference:Archives">Offline version</a></li>            </ul>
        </div>
                        <div id="cpp-toolbox">
            <h5><span>Toolbox</span><a href="ranges#"></a></h5>
            <ul>
<li id="t-whatlinkshere"><a href="http://en.cppreference.com/w/Special:WhatLinksHere/Talk:cpp/experimental/ranges" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="http://en.cppreference.com/w/Special:RecentChangesLinked/Talk:cpp/experimental/ranges" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="http://upload.cppreference.com/w/Special:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="../../Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;oldid=89985" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="http://en.cppreference.com/mwiki/index.php?title=Talk:cpp/experimental/ranges&amp;action=info">Page information</a></li>            </ul>
        </div>
                            <ul id="footer-info">
                                    <li id="footer-info-lastmod"> This page was last modified on 1 February 2017, at 02:59.</li>
                                    <li id="footer-info-viewcount">This page has been accessed 806 times.</li>
                            </ul>
                    <ul id="footer-places">
                                    <li id="footer-places-privacy"><a href="../../Cppreference:Privacy_policy" title="Cppreference:Privacy policy">Privacy policy</a></li>
                                    <li id="footer-places-about"><a href="../../Cppreference:FAQ" title="Cppreference:About">About cppreference.com</a></li>
                                    <li id="footer-places-disclaimer"><a href="../../Cppreference:General_disclaimer" title="Cppreference:General disclaimer">Disclaimers</a></li>
                            </ul>
                                    <ul id="footer-icons" class="noprint">
                                    <li id="footer-poweredbyico">
                                            <a href="http://www.mediawiki.org/"><img src="http://en.cppreference.com/mwiki/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>                                            <a href="http://qbnz.com/highlighter/"><img src="http://upload.cppreference.com/mwiki/images/2/2b/powered_by_geshi_88x31.png" alt="Powered by GeSHi" height="31" width="88" /></a>                                            <a href="http://www.tigertech.net/referral/cppreference.com"><img src="http://upload.cppreference.com/mwiki/images/9/94/powered_by_tigertech_88x31.png" alt="Hosted by Tiger Technologies" height="31" width="88" /></a>                                        </li>
                                </ul>
                        <div style="clear:both">
            </div>
            </div>
        </div>
        <!-- /footer -->
        <script>if(window.mw){
mw.loader.state({"site":"loading","user":"missing","user.groups":"ready"});
}</script>
<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=skins.cppreference2&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest","mediawiki.hidpi","ext.gadget.ColiruCompiler","ext.gadget.MathJax"], null, true);
}</script>
<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-2828341-1']);
_gaq.push(['_setDomainName', 'cppreference.com']);
_gaq.push(['_trackPageview']);
</script><!-- Served in 2.621 secs. -->
	</body>
<!-- Cached 20170720233608 -->
</html>
