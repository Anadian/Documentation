<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<title>Type - cppreference.com</title>
<meta charset="UTF-8" />
<meta name="generator" content="MediaWiki 1.21.2" />
<link rel="alternate" type="application/x-wiki" title="Edit" href="/mwiki/index.php?title=cpp/language/type&amp;action=edit" />
<link rel="edit" title="Edit" href="/mwiki/index.php?title=cpp/language/type&amp;action=edit" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/mwiki/opensearch_desc.php" title="cppreference.com (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.cppreference.com/mwiki/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="cppreference.com Atom feed" href="/mwiki/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.ColiruCompiler%7Cext.rtlcite%7Cmediawiki.legacy.commonPrint%2Cshared%7Cskins.cppreference2&amp;only=styles&amp;skin=cppreference2&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=cppreference2&amp;*" />
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}#toc{display:none}.editsection{display:none}
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-css:7:472787eddcf4605d11de8c7ef047234f */</style>

<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"cpp/language/type","wgTitle":"cpp/language/type","wgCurRevisionId":92038,"wgArticleId":13105,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Todo with reason"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"cpp/language/type","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":0,"showtoolbar":1,"skin":"cppreference2","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,
"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"gadget-ColiruCompiler":1});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});;},{},{});
/* cache key: mwiki1-mwiki_en_:resourceloader:filter:minify-js:7:ca03345b1e2c4d90a25d968753a73b92 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000dd;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #909090;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es1 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es2 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es3 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es4 {color: #008000; font-weight: bold;}
.cpp.source-cpp .es5 {color: #008000; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #008000;}
.cpp.source-cpp .nu0 {color: #000080;}
.cpp.source-cpp .nu6 {color: #000080;}
.cpp.source-cpp .nu8 {color: #000080;}
.cpp.source-cpp .nu12 {color: #000080;}
.cpp.source-cpp .nu16 {color:#000080;}
.cpp.source-cpp .nu17 {color:#000080;}
.cpp.source-cpp .nu18 {color:#000080;}
.cpp.source-cpp .nu19 {color:#000080;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><!--[if lt IE 7]><style type="text/css">body{behavior:url("/mwiki/skins/cppreference2/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-cpp_language_type skin-cppreference2 action-view cpp-navbar">
        <!-- header -->
        <div id="mw-head" class="noprint">
            <div id="cpp-head-first-base">
                <div id="cpp-head-first">
                    <h5><a href="/">
                        cppreference.com                        </a></h5>
                    <div id="cpp-head-search">
                        
<!-- 0 -->
<div id="p-search">
	<h5><label for="searchInput">Search</label></h5>
	<form action="/mwiki/index.php" id="searchform">
		<input type='hidden' name="title" value="Special:Search"/>
				<div id="simpleSearch">
						<input name="search" title="Search cppreference.com [f]" accesskey="f" id="searchInput" />						<button type="submit" name="button" title="Search the pages for this text" id="searchButton"><img src="/mwiki/skins/cppreference2/images/search-ltr.png?303" alt="Search" /></button>					</div>
			</form>
</div>

<!-- /0 -->
                    </div>
                    <div id="cpp-head-personal">
                        
<!-- 0 -->
<div id="p-personal" class="">
<span id="pt-createaccount"><a href="/mwiki/index.php?title=Special:UserLogin&amp;returnto=cpp%2Flanguage%2Ftype&amp;type=signup">Create account</a></span>	<div class="menu">
        <ul>
<li id="pt-login"><a href="/mwiki/index.php?title=Special:UserLogin&amp;returnto=cpp%2Flanguage%2Ftype" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>        </ul>
    </div>
</div>

<!-- /0 -->
                    </div>

                </div>
            </div>
            <div id="cpp-head-second-base">
                <div id="cpp-head-second">
                    <div id="cpp-head-tools-left">
                        
<!-- 0 -->
<div id="p-namespaces" class="vectorTabs">
	<h5>Namespaces</h5>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/w/cpp/language/type"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk"><span><a href="/w/Talk:cpp/language/type"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-variants" class="vectorMenu emptyPortlet">
		<h5><span>Variants</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                    <div id="cpp-head-tools-right">
                        
<!-- 0 -->
<div id="p-views" class="vectorTabs">
	<h5>Views</h5>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/w/cpp/language/type" >View</a></span></li>
					<li id="ca-edit"><span><a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit"  title="You can edit this page. Please use the preview button before saving [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/mwiki/index.php?title=cpp/language/type&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">History</a></span></li>
			</ul>
</div>

<!-- /0 -->

<!-- 1 -->
<div id="p-cactions" class="vectorMenu emptyPortlet">
	<h5><span>Actions</span><a href="#"></a></h5>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>

<!-- /1 -->
                    </div>
                </div>
            </div>
        </div>
        <!-- /header -->
        <!-- content -->
        <div id="cpp-content-base">
            <div id="content">
                <a id="top"></a>
                <div id="mw-js-message" style="display:none;"></div>
                                <!-- firstHeading -->
                <h1 id="firstHeading" class="firstHeading">Type</h1>
                <!-- /firstHeading -->
                <!-- bodyContent -->
                <div id="bodyContent">
                                        <!-- tagline -->
                    <div id="siteSub">From cppreference.com</div>
                    <!-- /tagline -->
                                        <!-- subtitle -->
                    <div id="contentSub"><span class="subpages">&lt; <a href="/w/cpp" title="cpp">cpp</a>&lrm; | <a href="/w/cpp/language" title="cpp/language">language</a></span></div>
                    <!-- /subtitle -->
                                                            <!-- bodycontent -->
                    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="t-navbar" style=""><div class="t-navbar-sep">&#160;</div><div class="t-navbar-head"><a href="/w/cpp" title="cpp"> C++</a><div class="t-navbar-menu"><div><div><table class="t-nv-begin" cellpadding="0" style="line-height:1.1em;">
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language" title="cpp/language"> Language</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/header" title="cpp/header"> Standard library headers</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/concept" title="cpp/concept"> Concepts</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/utility" title="cpp/utility"> Utilities library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/string" title="cpp/string"> Strings library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/container" title="cpp/container"> Containers library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/algorithm" title="cpp/algorithm"> Algorithms library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/iterator" title="cpp/iterator"> Iterators library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/numeric" title="cpp/numeric"> Numerics library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/io" title="cpp/io"> Input/output library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/locale" title="cpp/locale"> Localizations library</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/regex" title="cpp/regex"> Regular expressions library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/atomic" title="cpp/atomic"> Atomic operations library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/thread" title="cpp/thread"> Thread support library</a> <span class="t-mark-rev t-since-cxx11">(C++11)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/filesystem" title="cpp/filesystem"> Filesystem library</a> <span class="t-mark-rev t-since-cxx17">(C++17)</span> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/experimental" title="cpp/experimental"> Technical Specifications</a> </td></tr>
</table></div><div><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="http://en.cppreference.com/mwiki/index.php?title=Template:cpp/navbar_content&amp;action=edit">&#91;edit&#93;</a></span></div></div></div></div><div class="t-navbar-sep">&#160;</div><div class="t-navbar-head"><a href="/w/cpp/language" title="cpp/language"> C++ language</a></div><div class="t-navbar-sep">&#160;</div><div class="t-navbar-head"><a href="/w/cpp/language/basic_concepts" title="cpp/language/basic concepts"> Basic Concepts</a><div class="t-navbar-menu"><div><div style="display:inline-block">
<div><table class="t-nv-begin" cellpadding="0" style="">
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/keyword" title="cpp/keyword"> language keywords</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/translation_phases" title="cpp/language/translation phases"> phases of translation</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/comment" title="cpp/comment"> comments </a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/main_function" title="cpp/language/main function"> the main() function</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/identifiers" title="cpp/language/identifiers"> names and identifiers</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <strong class="selflink"> types</strong> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/types" title="cpp/language/types"> fundamental types</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/object" title="cpp/language/object"> objects</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/scope" title="cpp/language/scope"> scope</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/lifetime" title="cpp/language/lifetime"> object lifetime</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/storage_duration" title="cpp/language/storage duration"> storage duration and linkage</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/definition" title="cpp/language/definition"> definitions and ODR</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/lookup" title="cpp/language/lookup"> name lookup</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/qualified_lookup" title="cpp/language/qualified lookup">qualified name lookup</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/unqualified_lookup" title="cpp/language/unqualified lookup">unqualified name lookup</a> </td></tr>
<tr class="t-nv"><td colspan="5"> <a href="/w/cpp/language/memory_model" title="cpp/language/memory model"> memory model</a> </td></tr>
</table></div>
</div><div><span class="editsection noprint plainlinks" title="Edit this template"><a rel="nofollow" class="external text" href="http://en.cppreference.com/mwiki/index.php?title=Template:cpp/language/basics/navbar_content&amp;action=edit">&#91;edit&#93;</a></span></div></div></div></div><div class="t-navbar-sep">&#160;</div></div>
<p><a href="/w/cpp/language/object" title="cpp/language/object">Objects</a>, <a href="/w/cpp/language/reference" title="cpp/language/reference">references</a>, <a href="/w/cpp/language/functions" title="cpp/language/functions">functions</a> including <a href="/w/cpp/language/template_specialization" title="cpp/language/template specialization">function template specializations</a>, and <a href="/w/cpp/language/expressions" title="cpp/language/expressions">expressions</a> have a property called <i>type</i>, which both restricts the operations that are permitted for those entities and provides semantic meaning to the otherwise generic sequences of bits.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Type_classification"><span class="tocnumber">1</span> <span class="toctext">Type classification</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Type_naming"><span class="tocnumber">2</span> <span class="toctext">Type naming</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Elaborated_type_specifier"><span class="tocnumber">3</span> <span class="toctext">Elaborated type specifier</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Static_type"><span class="tocnumber">4</span> <span class="toctext">Static type</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Dynamic_type"><span class="tocnumber">5</span> <span class="toctext">Dynamic type</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Incomplete_type"><span class="tocnumber">6</span> <span class="toctext">Incomplete type</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
</ul>
</td></tr></table>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=1" title="Edit section: Type classification">edit</a>]</span> <span class="mw-headline" id="Type_classification">Type classification</span></h3>
<p>The C++ type system consists of the following types:
</p>
<ul><li> <a href="/w/cpp/language/types" title="cpp/language/types">fundamental types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_fundamental" title="cpp/types/is fundamental">std::is_fundamental</a></span>):
</li></ul>
<dl><dd><ul><li> the type <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">void</span></span></span> (see also <span class="t-lc"><a href="/w/cpp/types/is_void" title="cpp/types/is void">std::is_void</a></span>);
</li><li> the type <span class="t-c"><span class="mw-geshi cpp source-cpp"><a href="http://en.cppreference.com/w/cpp/types/nullptr_t"><span class="kw102">std::<span class="me2">nullptr_t</span></span></a></span></span> <span class="t-mark-rev t-since-cxx11">(since C++11)</span> (see also <span class="t-lc"><a href="/w/cpp/types/is_null_pointer" title="cpp/types/is null pointer">std::is_null_pointer</a></span>); 
</li><li> arithmetic types (see also <span class="t-lc"><a href="/w/cpp/types/is_arithmetic" title="cpp/types/is arithmetic">std::is_arithmetic</a></span>):
</li></ul>
<dl><dd><ul><li> floating-point types (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">float</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">double</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">long</span> <span class="kw4">double</span></span></span>) (see also <span class="t-lc"><a href="/w/cpp/types/is_floating_point" title="cpp/types/is floating point">std::is_floating_point</a></span>);
</li><li> integral types (see also <span class="t-lc"><a href="/w/cpp/types/is_integral" title="cpp/types/is integral">std::is_integral</a></span>):
</li></ul>
<dl><dd><ul><li> the type <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">bool</span></span></span>;
</li><li> character types:
</li></ul>
<dl><dd><ul><li> narrow character types (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">char</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">signed</span> <span class="kw4">char</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">unsigned</span> <span class="kw4">char</span></span></span>);
</li><li> wide character types (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">char16_t</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">char32_t</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">wchar_t</span></span></span>);
</li></ul>
</dd></dl>
<ul><li> signed integer types (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">short</span> <span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">long</span> <span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span></span></span>);
</li><li> unsigned integer types (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">unsigned</span> <span class="kw4">short</span> <span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">unsigned</span> <span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">int</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">unsigned</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">int</span></span></span>);
</li></ul>
</dd></dl>
</dd></dl>
</dd></dl>
<ul><li> compound types (see also <span class="t-lc"><a href="/w/cpp/types/is_compound" title="cpp/types/is compound">std::is_compound</a></span>):
</li></ul>
<dl><dd><ul><li> reference types (see also <span class="t-lc"><a href="/w/cpp/types/is_reference" title="cpp/types/is reference">std::is_reference</a></span>):
</li></ul>
<dl><dd><ul><li> <a href="/w/cpp/language/reference#Lvalue_references" title="cpp/language/reference">lvalue reference types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_lvalue_reference" title="cpp/types/is lvalue reference">std::is_lvalue_reference</a></span>):
</li></ul>
<dl><dd><ul><li> lvalue reference to object types;
</li><li> lvalue reference to function types;
</li></ul>
</dd></dl>
<ul><li> <a href="/w/cpp/language/reference#Rvalue_references" title="cpp/language/reference">rvalue reference types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_rvalue_reference" title="cpp/types/is rvalue reference">std::is_rvalue_reference</a></span>):
</li></ul>
<dl><dd><ul><li> rvalue reference to object types;
</li><li> rvalue reference to function types;
</li></ul>
</dd></dl>
</dd></dl>
<ul><li> pointer types (see also <span class="t-lc"><a href="/w/cpp/types/is_pointer" title="cpp/types/is pointer">std::is_pointer</a></span>):
</li></ul>
<dl><dd><ul><li> <a href="/w/cpp/language/pointer#Pointers_to_objects" title="cpp/language/pointer">pointer to object types</a>;
</li><li> <a href="/w/cpp/language/pointer#Pointers_to_functions" title="cpp/language/pointer">pointer to function types</a>;
</li></ul>
</dd></dl>
<ul><li> pointer to member types (see also <span class="t-lc"><a href="/w/cpp/types/is_member_pointer" title="cpp/types/is member pointer">std::is_member_pointer</a></span>):
</li></ul>
<dl><dd><ul><li> <a href="/w/cpp/language/pointer#Pointers_to_data_members" title="cpp/language/pointer">pointer to data member</a> types (see also <span class="t-lc"><a href="/w/cpp/types/is_member_object_pointer" title="cpp/types/is member object pointer">std::is_member_object_pointer</a></span>);
</li><li> <a href="/w/cpp/language/pointer#Pointers_to_member_functions" title="cpp/language/pointer">pointer to member function</a> types (see also <span class="t-lc"><a href="/w/cpp/types/is_member_function_pointer" title="cpp/types/is member function pointer">std::is_member_function_pointer</a></span>);
</li></ul>
</dd></dl>
<ul><li> <a href="/w/cpp/language/array" title="cpp/language/array">array types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_array" title="cpp/types/is array">std::is_array</a></span>);
</li><li> <a href="/w/cpp/language/function" title="cpp/language/function">function types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_function" title="cpp/types/is function">std::is_function</a></span>);
</li><li> <a href="/w/cpp/language/enum" title="cpp/language/enum">enumeration types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_enum" title="cpp/types/is enum">std::is_enum</a></span>);
</li><li> <a href="/w/cpp/language/class" title="cpp/language/class">class types</a>:
</li></ul>
<dl><dd><ul><li> non-union types (see also <span class="t-lc"><a href="/w/cpp/types/is_class" title="cpp/types/is class">std::is_class</a></span>);
</li><li> <a href="/w/cpp/language/union" title="cpp/language/union">union types</a> (see also <span class="t-lc"><a href="/w/cpp/types/is_union" title="cpp/types/is union">std::is_union</a></span>).
</li></ul>
</dd></dl>
</dd></dl>
<p>For every type other than reference and function, the type system supports three additional <a href="/w/cpp/language/cv" title="cpp/language/cv">cv-qualified versions</a> of that type (<span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">const</span></span></span>, <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">volatile</span></span></span>, and <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">const</span> <span class="kw4">volatile</span></span></span>).
</p><p>Types are grouped in various categories based on their properties: 
</p>
<ul><li> object type is a (possibly cv-qualified) type that is not a function type, not a reference type, and not <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">void</span></span></span> type (see also <span class="t-lc"><a href="/w/cpp/types/is_object" title="cpp/types/is object">std::is_object</a></span>);
</li><li> scalar types are (possibly cv-qualified) arithmetic, pointer, pointer to member, enumeration, and <span class="t-c"><span class="mw-geshi cpp source-cpp"><a href="http://en.cppreference.com/w/cpp/types/nullptr_t"><span class="kw102">std::<span class="me2">nullptr_t</span></span></a></span></span> types (see also <span class="t-lc"><a href="/w/cpp/types/is_scalar" title="cpp/types/is scalar">std::is_scalar</a></span>);
</li><li> trivial types (see also <span class="t-lc"><a href="/w/cpp/types/is_trivial" title="cpp/types/is trivial">std::is_trivial</a></span>), POD types (see also <span class="t-lc"><a href="/w/cpp/types/is_pod" title="cpp/types/is pod">std::is_pod</a></span>), literal types (see also <span class="t-lc"><a href="/w/cpp/types/is_literal_type" title="cpp/types/is literal type">std::is_literal_type</a></span>), and other categories listed in the <a href="/w/cpp/types" title="cpp/types"> the type traits library</a> or as <a href="/w/cpp/concept" title="cpp/concept">named type requirements</a>.
</li></ul>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=2" title="Edit section: Type naming">edit</a>]</span> <span class="mw-headline" id="Type_naming">Type naming</span></h3>
<p>A <a href="/w/cpp/language/name" title="cpp/language/name" class="mw-redirect">name</a> can be declared to refer to a type by means of:
</p>
<ul><li> <a href="/w/cpp/language/class" title="cpp/language/class">class</a> declaration;
</li><li> <a href="/w/cpp/language/enum" title="cpp/language/enum">enum</a> declaration;
</li><li> <a href="/w/cpp/language/typedef" title="cpp/language/typedef">typedef</a> declaration;
</li><li> <a href="/w/cpp/language/type_alias" title="cpp/language/type alias">type alias</a> declaration.
</li></ul>
<p>Types that do not have names often need to be referred to in C++ programs; the syntax for that is known as <i>type-id</i>. The syntax of the type-id that names type T is exactly the syntax of a <a href="/w/cpp/language/declarations" title="cpp/language/declarations">declaration</a> of a variable or function of type T, with the identifier omitted, except that <i>decl-specifier-seq</i> of the declaration grammar is constrained to <i>type-specifier-seq</i>, and that new types may be defined only if the type-id appears on the right-hand side of a non-template type alias declaration.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="kw4">int</span><span class="sy2">*</span> p<span class="sy4">;</span>               <span class="co1">// declaration of a pointer to int</span>
<span class="kw1">static_cast</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy2">*</span><span class="sy1">&gt;</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// type-id is &quot;int*&quot;</span>
&#160;
<span class="kw4">int</span> a<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy4">;</span>   <span class="co1">// declaration of an array of 3 int</span>
new <span class="kw4">int</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy4">;</span> <span class="co1">// type-id is &quot;int[3]&quot; (called new-type-id)</span>
&#160;
<span class="kw4">int</span> <span class="br0">&#40;</span><span class="sy2">*</span><span class="br0">&#40;</span><span class="sy2">*</span>x<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy4">;</span>      <span class="co1">// declaration of an array of 2 pointers to functions</span>
                          <span class="co1">// returning pointer to array of 3 int</span>
new <span class="br0">&#40;</span><span class="kw4">int</span> <span class="br0">&#40;</span><span class="sy2">*</span><span class="br0">&#40;</span><span class="sy2">*</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// type-id is &quot;int (*(*[2])())[3]&quot;</span>
&#160;
<span class="kw4">void</span> f<span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy4">;</span>                    <span class="co1">// declaration of a function taking int and returning void</span>
<a href="http://en.cppreference.com/w/cpp/utility/functional/function"><span class="kw1059">std::<span class="me2">function</span></span></a><span class="sy1">&lt;</span><span class="kw4">void</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy1">&gt;</span> x <span class="sy1">=</span> f<span class="sy4">;</span> <span class="co1">// type template parameter is a type-id &quot;void(int)&quot;</span>
&#160;
<a href="http://en.cppreference.com/w/cpp/container/vector"><span class="kw1266">std::<span class="me2">vector</span></span></a><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> v<span class="sy4">;</span>       <span class="co1">// declaration of a vector of int</span>
sizeof<span class="br0">&#40;</span><a href="http://en.cppreference.com/w/cpp/container/vector"><span class="kw1266">std::<span class="me2">vector</span></span></a><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// type-id is &quot;std::vector&lt;int&gt;&quot;</span>
&#160;
<span class="kw1">struct</span> <span class="br0">&#123;</span> <span class="kw4">int</span> x<span class="sy4">;</span> <span class="br0">&#125;</span> b<span class="sy4">;</span>         <span class="co1">// creates a new type and declares an object b of that type</span>
sizeof<span class="br0">&#40;</span><span class="kw1">struct</span><span class="br0">&#123;</span> <span class="kw4">int</span> x<span class="sy4">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span>    <span class="co1">// error: cannot define new types in a sizeof expression</span>
<span class="kw1">using</span> t <span class="sy1">=</span> <span class="kw1">struct</span> <span class="br0">&#123;</span> <span class="kw4">int</span> x<span class="sy4">;</span> <span class="br0">&#125;</span><span class="sy4">;</span> <span class="co1">// creates a new type and declares t as an alias of that type</span>
&#160;
sizeof<span class="br0">&#40;</span><span class="kw4">static</span> <span class="kw4">int</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// error: storage class specifiers not part of type-specifier-seq</span>
<a href="http://en.cppreference.com/w/cpp/utility/functional/function"><span class="kw1059">std::<span class="me2">function</span></span></a><span class="sy1">&lt;</span><span class="kw1">inline</span> <span class="kw4">void</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="sy1">&gt;</span> f<span class="sy4">;</span> <span class="co1">// error: neither are function specifiers</span></pre></div></div>
<p>The <i>declarator</i> part of the declaration grammar with the name removed is referred to as <i>abstract-declarator</i>.
</p><p><i>Type-id</i> may be used in the following situations:
</p>
<ul><li> to specify the target type in <a href="/w/cpp/language/expressions#Conversions" title="cpp/language/expressions">cast expressions</a>;
</li><li> as arguments to <a href="/w/cpp/language/sizeof" title="cpp/language/sizeof">sizeof</a>, <a href="/w/cpp/language/alignof" title="cpp/language/alignof">alignof</a>, <a href="/w/cpp/language/alignas" title="cpp/language/alignas">alignas</a>, <a href="/w/cpp/language/new" title="cpp/language/new">new</a>, and <a href="/w/cpp/language/typeid" title="cpp/language/typeid">typeid</a>;
</li><li> on the right-hand side of a <a href="/w/cpp/language/type_alias" title="cpp/language/type alias">type alias</a> declaration;
</li><li> as the trailing return type of a <a href="/w/cpp/language/function" title="cpp/language/function">function</a> declaration;
</li><li> as the default argument of a <a href="/w/cpp/language/template_parameters#Type_template_parameter" title="cpp/language/template parameters">template type parameter</a>;
</li><li> as the template argument for a <a href="/w/cpp/language/template_parameters#Template_type_arguments" title="cpp/language/template parameters">template type parameter</a>;
</li><li> in <a href="/w/cpp/language/except_spec" title="cpp/language/except spec">dynamic exception specification</a>.
</li></ul>
<p><i>Type-id</i> can be used with some modifications in the following situations:
</p>
<ul><li> in the parameter list of a <a href="/w/cpp/language/function#Parameter_list" title="cpp/language/function">function</a> (when the parameter name is omitted), type-id uses <i>decl-specifier-seq</i> instead of <i>type-specifier-seq</i> (in particular, some storage class specifiers are allowed);
</li><li> in the name of a <a href="/w/cpp/language/cast_operator" title="cpp/language/cast operator">user-defined conversion function</a>, the abstract declarator cannot include function or array operators.
</li></ul>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br />Reason: 8.2[dcl.ambig.res] if it can be compactly summarized </td></tr></table>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br />Reason: mention and link to decltype and auto </td></tr></table>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=3" title="Edit section: Elaborated type specifier">edit</a>]</span> <span class="mw-headline" id="Elaborated_type_specifier">Elaborated type specifier</span></h3>
<p>Elaborated type specifiers may be used to refer to a previously-declared class name (class, struct, or union) or to a previously-declared enum name even if the name was <a href="/w/cpp/language/lookup" title="cpp/language/lookup">hidden by a non-type declaration</a>. They may also be used to declare new class names.
</p><p>See <a href="/w/cpp/language/elaborated_type_specifier" title="cpp/language/elaborated type specifier">elaborated type specifier</a> for details.
</p>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=4" title="Edit section: Static type">edit</a>]</span> <span class="mw-headline" id="Static_type">Static type</span></h3>
<p>The type of an expression that results from the compile-time analysis of the program is known as the <i>static type</i> of the expression. The static type does not change while the program is executing.
</p>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=5" title="Edit section: Dynamic type">edit</a>]</span> <span class="mw-headline" id="Dynamic_type">Dynamic type</span></h3>
<p>If some <a href="/w/cpp/language/value_category" title="cpp/language/value category">glvalue expression</a> refers to a <a href="/w/cpp/language/object" title="cpp/language/object">polymorphic object</a>, the type of its most derived object is known as the dynamic type.
</p>
<div dir="ltr" class="mw-geshi" style="text-align: left;"><div class="cpp source-cpp"><pre class="de1"><span class="co1">// given</span>
<span class="kw1">struct</span> B <span class="br0">&#123;</span> <span class="kw1">virtual</span> ~B<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="sy4">;</span> <span class="co1">// polymorphic type</span>
<span class="kw1">struct</span> D<span class="sy4">:</span> B <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy4">;</span> <span class="co1">// polymorphic type</span>
D d<span class="sy4">;</span> <span class="co1">// most-derived object</span>
B<span class="sy2">*</span> ptr <span class="sy1">=</span> <span class="sy3">&amp;</span>d<span class="sy4">;</span>
<span class="co1">// the static type of (*ptr) is B</span>
<span class="co1">// the dynamic type of (*ptr) is D</span></pre></div></div>
<p>For prvalue expressions, the dynamic type is always the same as the static type.
</p>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=6" title="Edit section: Incomplete type">edit</a>]</span> <span class="mw-headline" id="Incomplete_type">Incomplete type</span></h3>
<p>The following types are <i>incomplete types</i>:
</p>
<ul><li> the type <span class="t-c"><span class="mw-geshi cpp source-cpp"><span class="kw4">void</span></span></span> (possibly <a href="/w/cpp/language/cv" title="cpp/language/cv">cv</a>-qualified);
</li><li> class type that has been declared (e.g. by <a href="/w/cpp/language/class#Forward_declaration" title="cpp/language/class">forward declaration</a>) but not defined;
</li><li> <a href="/w/cpp/language/array#Arrays_of_unknown_bound" title="cpp/language/array">array of unknown bound</a>;
</li><li> array of elements of incomplete type;
</li><li> <a href="/w/cpp/language/enum" title="cpp/language/enum">enumeration type</a> from the point of declaration until its underlying type is determined.
</li></ul>
<p>Any of the following contexts requires class <code>T</code> to be complete:
</p>
<ul><li> <a href="/w/cpp/language/function" title="cpp/language/function">definition</a> or function call to a function with return type <code>T</code> or argument type <code>T</code>;
</li><li> <a href="/w/cpp/language/definition" title="cpp/language/definition">definition</a> of an object of type <code>T</code>;
</li><li> declaration of a <a href="/w/cpp/language/data_members" title="cpp/language/data members">non-static class data member</a> of type <code>T</code>;
</li><li> <a href="/w/cpp/language/new" title="cpp/language/new">new-expression</a> for an object of type <code>T</code> or an array whose element type is <code>T</code>;
</li><li> <a href="/w/cpp/language/implicit_cast#Lvalue_to_rvalue_conversion" title="cpp/language/implicit cast" class="mw-redirect">lvalue-to-rvalue conversion</a> applied to a glvalue of type <code>T</code>;
</li><li> an <a href="/w/cpp/language/implicit_cast" title="cpp/language/implicit cast" class="mw-redirect">implicit</a> or <a href="/w/cpp/language/explicit_cast" title="cpp/language/explicit cast">explicit</a> conversion to type <code>T</code>;
</li><li> a <a href="/w/cpp/language/implicit_cast" title="cpp/language/implicit cast" class="mw-redirect">standard conversion</a>, <a href="/w/cpp/language/dynamic_cast" title="cpp/language/dynamic cast">dynamic_cast</a>, or <a href="/w/cpp/language/static_cast" title="cpp/language/static cast">static_cast</a> to type <code>T*</code> or <code>T&amp;</code>, except when converting from the <a href="/w/cpp/types/NULL" title="cpp/types/NULL">null pointer constant</a> or from a <a href="/w/cpp/language/pointer#Pointers_to_void" title="cpp/language/pointer">pointer to void</a>;
</li><li> <a href="/w/cpp/language/operator_member_access" title="cpp/language/operator member access">class member access operator</a> applied to an expression of type <code>T</code>;
</li><li> <a href="/w/cpp/language/typeid" title="cpp/language/typeid">typeid</a>, <a href="/w/cpp/language/sizeof" title="cpp/language/sizeof">sizeof</a>, or <a href="/w/cpp/language/alignof" title="cpp/language/alignof">alignof</a> operator applied to type <code>T</code>;
</li><li> <a href="/w/cpp/language/operator_arithmetic" title="cpp/language/operator arithmetic">arithmetic operator</a> applied to a pointer to <code>T</code>;
</li><li> definition of a class with base class <code>T</code>;
</li><li> assignment to an lvalue of type <code>T</code>;
</li><li> a <a href="/w/cpp/language/try_catch" title="cpp/language/try catch">catch-clause</a> for an exception of type <code>T</code>, <code>T&amp;</code>, or <code>T*</code>.
</li></ul>
<p>(In general, when the size and layout of <code>T</code> must be known.)
</p><p>If any of these situations occur in a translation unit, the definition of the type must appear in the same translation unit. Otherwise, it is not required.
</p>
<table class="metadata plainlinks ambox mbox-small-left ambox-notice" style=""><tr><td class="mbox-empty-cell"></td><td class="mbox-text" style="">This section is incomplete<br />Reason: rules for completing the incomplete types from §3.9[basic.types]/6 </td></tr></table>
<h3><span class="editsection">[<a href="/mwiki/index.php?title=cpp/language/type&amp;action=edit&amp;section=7" title="Edit section: See also">edit</a>]</span> <span class="mw-headline" id="See_also">See also</span></h3>
<table class="t-dsc-begin">

<tr class="t-dsc">
<td colspan="2"> <div class="t-dsc-see"><span><a href="/w/c/language/type" title="c/language/type">C documentation</a></span> for <span class="t-dsc-see-tt"><span>Type</span></span></div>
</td></tr>

</table>

<!-- 
NewPP limit report
Preprocessor visited node count: 3338/1000000
Preprocessor generated node count: 8226/1000000
Post‐expand include size: 41709/2097152 bytes
Template argument size: 9186/2097152 bytes
Highest expansion depth: 17/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key mwiki1-mwiki_en_:pcache:idhash:13105-0!*!0!!en!*!* and timestamp 20170403184111 -->
</div>                    <!-- /bodycontent -->
                                        <!-- printfooter -->
                    <div class="printfooter">
                    Retrieved from "<a href="http://en.cppreference.com/mwiki/index.php?title=cpp/language/type&amp;oldid=92038">http://en.cppreference.com/mwiki/index.php?title=cpp/language/type&amp;oldid=92038</a>"                    </div>
                    <!-- /printfooter -->
                                                            <!-- catlinks -->
                    <div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/w/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/w/Category:Todo_with_reason" title="Category:Todo with reason">Todo with reason</a></li></ul></div></div>                    <!-- /catlinks -->
                                                            <div class="visualClear"></div>
                    <!-- debughtml -->
                                        <!-- /debughtml -->
                </div>
                <!-- /bodyContent -->
            </div>
        </div>
        <!-- /content -->
        <!-- footer -->
        <div id="cpp-footer-base" class="noprint">
            <div id="footer">
                        <div id="cpp-navigation">
            <h5>Navigation</h5>
            <ul>
<li id="n-Support-us"><a href="http://www.cppreference.com/support" rel="nofollow">Support us</a></li><li id="n-recentchanges"><a href="/w/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-FAQ"><a href="/w/Cppreference:FAQ">FAQ</a></li><li id="n-Offline-version"><a href="/w/Cppreference:Archives">Offline version</a></li>            </ul>
        </div>
                        <div id="cpp-toolbox">
            <h5><span>Toolbox</span><a href="#"></a></h5>
            <ul>
<li id="t-whatlinkshere"><a href="/w/Special:WhatLinksHere/cpp/language/type" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/w/Special:RecentChangesLinked/cpp/language/type" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-upload"><a href="http://upload.cppreference.com/w/Special:Upload" title="Upload files [u]" accesskey="u">Upload file</a></li><li id="t-specialpages"><a href="/w/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="/mwiki/index.php?title=cpp/language/type&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="/mwiki/index.php?title=cpp/language/type&amp;oldid=92038" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/mwiki/index.php?title=cpp/language/type&amp;action=info">Page information</a></li>            </ul>
        </div>
                        <div id="cpp-languages">
            <div><ul><li>In other languages</li></ul></div>
            <div><ul>
<li class="interwiki-zh"><a href="http://zh.cppreference.com/w/cpp/language/type" title="cpp/language/type" lang="zh" hreflang="zh">中文</a></li>            </ul></div>
        </div>
            <ul id="footer-info">
                                    <li id="footer-info-lastmod"> This page was last modified on 3 April 2017, at 11:41.</li>
                                    <li id="footer-info-viewcount">This page has been accessed 82,005 times.</li>
                            </ul>
                    <ul id="footer-places">
                                    <li id="footer-places-privacy"><a href="/w/Cppreference:Privacy_policy" title="Cppreference:Privacy policy">Privacy policy</a></li>
                                    <li id="footer-places-about"><a href="/w/Cppreference:About" title="Cppreference:About">About cppreference.com</a></li>
                                    <li id="footer-places-disclaimer"><a href="/w/Cppreference:General_disclaimer" title="Cppreference:General disclaimer">Disclaimers</a></li>
                            </ul>
                                    <ul id="footer-icons" class="noprint">
                                    <li id="footer-poweredbyico">
                                            <a href="//www.mediawiki.org/"><img src="/mwiki/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>                                            <a href="http://qbnz.com/highlighter/"><img src="http://upload.cppreference.com/mwiki/images/2/2b/powered_by_geshi_88x31.png" alt="Powered by GeSHi" height="31" width="88" /></a>                                            <a href="http://www.tigertech.net/referral/cppreference.com"><img src="http://upload.cppreference.com/mwiki/images/9/94/powered_by_tigertech_88x31.png" alt="Hosted by Tiger Technologies" height="31" width="88" /></a>                                        </li>
                                </ul>
                        <div style="clear:both">
            </div>
            </div>
        </div>
        <!-- /footer -->
        <script>if(window.mw){
mw.loader.state({"site":"loading","user":"missing","user.groups":"ready"});
}</script>
<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=skins.cppreference2&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest","mediawiki.hidpi","ext.gadget.ColiruCompiler"], null, true);
}</script>
<script src="http://en.cppreference.com/mwiki/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=cppreference2&amp;*"></script>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-2828341-1']);
_gaq.push(['_setDomainName', 'cppreference.com']);
_gaq.push(['_trackPageview']);
</script><!-- Served in 0.066 secs. -->
	</body>
<!-- Cached 20170403184849 -->
</html>
